{"version":3,"sources":["mvc/redux-view.js"],"names":["defaultMapState","defaultMapDispatch","dispatch","ReduxViewMixin","delegateEntityEvents","_delegateEntityEvents","model","collection","_delegateBehaviorEntityEvents","connectToStore","shouldViewRender","onStoreUpdated","oldState","newState","state","render","store","mapState","mapDispatch","actions","currentState","getState","serializeData","data","serializeModel","items","serializeCollection","redux","extend","prototype"],"mappings":"AAAA;;;;;;AAEA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB;AAAA,SAAO,EAAP;AAAA,CAAxB;AACA,IAAMC,qBAAqB,SAArBA,kBAAqB;AAAA,SAAa,EAAEC,kBAAF,EAAb;AAAA,CAA3B;;AAEA,IAAMC,iBAAiB;AACrBC,sBADqB,kCACE;AACrB,SAAKC,qBAAL,CAA2B,KAAKC,KAAhC,EAAuC,KAAKC,UAA5C;;AAEA;AACA,SAAKC,6BAAL;;AAEA;AACA,SAAKC,cAAL;;AAEA,WAAO,IAAP;AACD,GAXoB;AAarBC,kBAbqB,8BAaF;AACjB,WAAO,IAAP;AACD,GAfoB;AAiBrBC,gBAjBqB,0BAiBNC,QAjBM,EAiBIC,QAjBJ,EAiBc;AACjC,SAAKC,KAAL,GAAaD,QAAb;;AAEA,QAAI,KAAKH,gBAAL,CAAsBE,QAAtB,EAAgCC,QAAhC,CAAJ,EAA+C;AAC7C,WAAKE,MAAL;AACD;AACF,GAvBoB;AAyBrBN,gBAzBqB,4BAyBJ;AAAA;;AACf,QAAI,CAAC,uBAASO,KAAd,EAAqB;AACnB;AACD;;AAED,QAAMC,WAAW,KAAKA,QAAL,IAAiBjB,eAAlC;AACA,QAAMkB,cAAc,KAAKA,WAAL,IAAoBjB,kBAAxC;AACA,QAAMkB,UAAU,+BAAmBD,aAAnB,EAAkC,uBAASF,KAAT,CAAed,QAAjD,CAAhB;AACA,QAAMkB,eAAeH,SAAS,uBAASD,KAAT,CAAeK,QAAf,EAAT,CAArB;;AAEA,SAAKP,KAAL,GAAaM,YAAb;AACA,SAAKD,OAAL,GAAeA,OAAf;;AAEA,oCAAa,uBAASH,KAAtB,EAA6BI,YAA7B,EAA2CH,QAA3C,EAAqD,UAACJ,QAAD,EAAWD,QAAX,EAAwB;AAC3E,YAAKD,cAAL,CAAoBC,QAApB,EAA8BC,QAA9B;AACD,KAFD;AAGD,GAzCoB;AA2CrBS,eA3CqB,2BA2CL;AACd,QAAIC,OAAO,EAAX;;AAEA;AACA,QAAI,KAAKjB,KAAT,EAAgB;AACdiB,aAAO,KAAKC,cAAL,EAAP;AACD,KAFD,MAEO,IAAI,KAAKjB,UAAT,EAAqB;AAC1BgB,aAAO;AACLE,eAAO,KAAKC,mBAAL;AADF,OAAP;AAGD;;AAED,QAAI,KAAKZ,KAAT,EAAgB;AACdS,WAAKI,KAAL,GAAa,KAAKb,KAAlB;AACD;;AAED,WAAOS,IAAP;AACD;AA5DoB,CAAvB;;AA+DA,iBAAEK,MAAF,CAAS,eAAKC,SAAd,EAAyB1B,cAAzB","file":"redux-view.js","sourcesContent":["'use strict';\n\nimport { View } from 'backbone.marionette';\nimport { bindActionCreators } from 'redux';\nimport { observeStore, provider } from '../helpers/redux-helpers';\nimport _ from 'lodash';\n\nconst defaultMapState = () => ({});\nconst defaultMapDispatch = dispatch => ({ dispatch });\n\nconst ReduxViewMixin = {\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    // listen to redux store\n    this.connectToStore();\n\n    return this;\n  },\n\n  shouldViewRender() {\n    return true;\n  },\n\n  onStoreUpdated(oldState, newState) {\n    this.state = newState;\n\n    if (this.shouldViewRender(oldState, newState)) {\n      this.render();\n    }\n  },\n\n  connectToStore() {\n    if (!provider.store) {\n      return;\n    }\n\n    const mapState = this.mapState || defaultMapState;\n    const mapDispatch = this.mapDispatch || defaultMapDispatch;\n    const actions = bindActionCreators(mapDispatch(), provider.store.dispatch);\n    const currentState = mapState(provider.store.getState());\n\n    this.state = currentState;\n    this.actions = actions;\n\n    observeStore(provider.store, currentState, mapState, (newState, oldState) => {\n      this.onStoreUpdated(oldState, newState);\n    });\n  },\n\n  serializeData() {\n    let data = {};\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      data = this.serializeModel();\n    } else if (this.collection) {\n      data = {\n        items: this.serializeCollection()\n      };\n    }\n\n    if (this.state) {\n      data.redux = this.state;\n    }\n\n    return data;\n  }\n};\n\n_.extend(View.prototype, ReduxViewMixin);\n\nexport default View;\n"]}