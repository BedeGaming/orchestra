{"version":3,"sources":["mixins/touch.view.js"],"names":[],"mappings":"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","file":"mixins/touch.view.js","sourcesContent":["//\n// #orchestra/mixins/touch.view.js\n//\n'use strict';\n\nimport Backbone from 'backbone';\nimport Hammer from 'hammerjs';\nimport _ from 'lodash';\nimport $ from 'jquery';\n\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nexport default {\n\n  hammerEvents: {},\n\n  _hammerInstances: [],\n\n  undelegateEvents() {\n    this._undelegateHammerEvents();\n  },\n\n  _undelegateHammerEvents() {\n    this._unhammer();\n  },\n\n  delegateEvents() {\n    this._delegateHammerEvents();\n    return this;\n  },\n\n  _delegateHammerEvents(events) {\n    const options = _.defaults(this.hammerOptions || {}, Backbone.hammerOptions);\n\n    if (!(events || (events = _.result(this, 'hammerEvents')))) {\n      return this;\n    }\n\n    _.each(events, (eventItem, key) => {\n      let method = eventItem;\n\n      if (!_.isFunction(method)) {\n        method = this[eventItem];\n      }\n\n      if (method) {\n        const match = key.match(delegateEventSplitter);\n        const selector = match[2];\n        let eventName = match[1];\n\n        method = _.bind(method, this);\n        this._hammer(options, selector, eventName, method);\n      }\n\n    });\n\n    return this;\n  },\n\n  _getEventHandler(selector, method) {\n    return (e) => {\n      let context = this.$el;\n\n      if (selector) {\n        context = context.find(selector);\n      }\n\n      context.each((i, el) => {\n        let $el = $(el);\n\n        if (el === e.target || $el.has(e.target).length) {\n          let event = _.extend(e, {currentTarget: el});\n          method(event);\n        }\n      });\n    };\n  },\n\n  _hammer(options, selector, eventName, method) {\n    if (!this.$el || !this.$el.length) return false;\n\n    let hammer = new Hammer(this.$el.get(0), _.clone(options));\n    let handler = this._getEventHandler(selector, method);\n\n    hammer.on(eventName, handler);\n    this._hammerInstances.push(hammer);\n  },\n\n  _unhammer() {\n    _.each(this._hammerInstances, (i) => i.destroy());\n    this._hammerInstances = [];\n  }\n};\n"],"sourceRoot":"/source/"}