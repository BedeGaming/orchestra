{"version":3,"sources":["mixins/touch.view.js"],"names":["delegateEventSplitter","hammerEvents","_hammerInstances","undelegateEvents","_undelegateHammerEvents","_unhammer","delegateEvents","_delegateHammerEvents","events","options","defaults","hammerOptions","result","each","eventItem","key","method","isFunction","match","selector","eventName","bind","_hammer","_getEventHandler","e","context","$el","find","i","el","target","has","length","event","extend","currentTarget","hammer","get","clone","handler","on","push","destroy"],"mappings":"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","file":"touch.view.js","sourcesContent":["//\n// #orchestra/mixins/touch.view.js\n//\n'use strict';\n\nimport Backbone from 'backbone';\nimport Hammer from 'hammerjs';\nimport _ from 'lodash';\nimport $ from 'jquery';\n\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nexport default {\n\n  hammerEvents: {},\n\n  _hammerInstances: [],\n\n  undelegateEvents() {\n    this._undelegateHammerEvents();\n  },\n\n  _undelegateHammerEvents() {\n    this._unhammer();\n  },\n\n  delegateEvents() {\n    this._delegateHammerEvents();\n    return this;\n  },\n\n  _delegateHammerEvents(events) {\n    const options = _.defaults(this.hammerOptions || {}, Backbone.hammerOptions);\n\n    if (!(events || (events = _.result(this, 'hammerEvents')))) {\n      return this;\n    }\n\n    _.each(events, (eventItem, key) => {\n      let method = eventItem;\n\n      if (!_.isFunction(method)) {\n        method = this[eventItem];\n      }\n\n      if (method) {\n        const match = key.match(delegateEventSplitter);\n        const selector = match[2];\n        let eventName = match[1];\n\n        method = _.bind(method, this);\n        this._hammer(options, selector, eventName, method);\n      }\n\n    });\n\n    return this;\n  },\n\n  _getEventHandler(selector, method) {\n    return (e) => {\n      let context = this.$el;\n\n      if (selector) {\n        context = context.find(selector);\n      }\n\n      context.each((i, el) => {\n        let $el = $(el);\n\n        if (el === e.target || $el.has(e.target).length) {\n          let event = _.extend(e, {currentTarget: el});\n          method(event);\n        }\n      });\n    };\n  },\n\n  _hammer(options, selector, eventName, method) {\n    if (!this.$el || !this.$el.length) return false;\n\n    let hammer = new Hammer(this.$el.get(0), _.clone(options));\n    let handler = this._getEventHandler(selector, method);\n\n    hammer.on(eventName, handler);\n    this._hammerInstances.push(hammer);\n  },\n\n  _unhammer() {\n    _.each(this._hammerInstances, (i) => i.destroy());\n    this._hammerInstances = [];\n  }\n};\n"]}