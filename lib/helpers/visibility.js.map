{"version":3,"sources":["helpers/visibility.js"],"names":["channel","Radio","VisibilityHelper","visProp","getHiddenProp","evtname","replace","document","on","isHidden","request","prefixes","i","length","prop","Visibility"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;AAEA;;;;AACA;;;;;;;;AACA,IAAMA,UAAUC,mBAAMD,OAAN,CAAc,MAAd,CAAhB;;IAEME,gB;AACJ,8BAAc;AAAA;;AAAA;;AACZ,QAAMC,UAAU,KAAKC,aAAL,EAAhB;;AAEA,QAAID,OAAJ,EAAa;AACX,UAAME,UAAUF,QAAQG,OAAR,CAAgB,YAAhB,EAA8B,EAA9B,IAAoC,kBAApD;AACA,4BAAEC,QAAF,EAAYC,EAAZ,CAAeH,OAAf,EAAwB,YAAM;AAC5B,YAAI,MAAKI,QAAL,EAAJ,EAAqB;AACnBT,kBAAQU,OAAR,CAAgB,WAAhB;AACD,SAFD,MAEO;AACLV,kBAAQU,OAAR,CAAgB,YAAhB;AACD;AACF,OAND;AAOD;AACF;;;;oCAEe;AACd,UAAMC,WAAW,CAAC,QAAD,EAAW,KAAX,EAAkB,IAAlB,EAAwB,GAAxB,CAAjB;;AAEA;AACA,UAAI,YAAYJ,QAAhB,EAA0B;AACxB,eAAO,QAAP;AACD;;AAED;AACA,WAAK,IAAIK,IAAI,CAAb,EAAgBA,IAAID,SAASE,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,YAAKD,SAASC,CAAT,IAAc,QAAf,IAA4BL,QAAhC,EAA0C;AACxC,iBAAOI,SAASC,CAAT,IAAc,QAArB;AACD;AACF;;AAED;AACA,aAAO,IAAP;AACD;;;+BAEU;AACT,UAAME,OAAO,KAAKV,aAAL,EAAb;AACA,UAAI,CAACU,IAAL,EAAW;AACT,eAAO,KAAP;AACD;;AAED,aAAOP,SAASO,IAAT,CAAP;AACD;;;;;;AAGI,IAAMC,kCAAa,IAAIb,gBAAJ,EAAnB","file":"visibility.js","sourcesContent":["//\n// expose device capibilities to app object.\n//\n'use strict';\n\nimport $ from 'jquery';\nimport Radio from 'backbone.radio';\nconst channel = Radio.channel('main');\n\nclass VisibilityHelper {\n  constructor() {\n    const visProp = this.getHiddenProp();\n\n    if (visProp) {\n      const evtname = visProp.replace(/[H|h]idden/, '') + 'visibilitychange';\n      $(document).on(evtname, () => {\n        if (this.isHidden()) {\n          channel.request('appHidden');\n        } else {\n          channel.request('appShowing');\n        }\n      });\n    }\n  }\n\n  getHiddenProp() {\n    const prefixes = ['webkit', 'moz', 'ms', 'o'];\n\n    // if 'hidden' is natively supported just return it\n    if ('hidden' in document) {\n      return 'hidden';\n    }\n\n    // otherwise loop over all the known prefixes until we find one\n    for (let i = 0; i < prefixes.length; i++) {\n      if ((prefixes[i] + 'Hidden') in document) {\n        return prefixes[i] + 'Hidden';\n      }\n    }\n\n    // otherwise it's not supported\n    return null;\n  }\n\n  isHidden() {\n    const prop = this.getHiddenProp();\n    if (!prop) {\n      return false;\n    }\n\n    return document[prop];\n  }\n}\n\nexport const Visibility = new VisibilityHelper();\n"]}