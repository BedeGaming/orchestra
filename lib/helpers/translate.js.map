{"version":3,"sources":["helpers/translate.js"],"names":["resources","channel","Radio","TranslateHelpers","locale","request","config","app","key","resStore","i18nKey","params","getLocale","result","options","postProcess","sprintf","i18next","use","init","compatibilityJSON","nsSeparator","keySeparator","lng","err","translate","count","Translator"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,YAAY,EAAlB;AACA,IAAMC,UAAUC,mBAAMD,OAAN,CAAc,QAAd,CAAhB;;IAEME,gB;;;;;;;gCAEQ;AACV,UAAIC,SAAS,OAAb;;AAEA,UAAIH,QAAQI,OAAR,CAAgB,QAAhB,CAAJ,EAA+B;AAC7B,YAAMC,SAASL,QAAQI,OAAR,CAAgB,QAAhB,CAAf;;AAEA,YAAIC,OAAOC,GAAX,EAAgB;AACdH,mBAASE,OAAOC,GAAP,CAAWH,MAAX,IAAqB,OAA9B;AACD;AACF;;AAED,aAAOA,MAAP;AACD;;;8BAESI,G,EAAKC,Q,EAAU;AACvBT,gBAAUQ,GAAV,IAAiBC,QAAjB;AACD;;;8BAESC,O,EAASC,M,EAAQ;AACzB,UAAMP,SAAS,KAAKQ,SAAL,EAAf;AACA,UAAIC,SAAS,IAAb;AACA,UAAMC,UAAU;AACdC,qBAAa,SADC;AAEdC,iBAASL;AAFK,OAAhB;;AAKAM,wBACGC,GADH,CACOF,qCADP,EAEGG,IAFH,CAEQ;AACJC,2BAAmB,IADf;AAEJC,qBAAa,KAFT;AAGJC,sBAAc,KAHV;AAIJC,aAAKnB,MAJD;AAKJJ,mBAAWA,UAAUI,MAAV;AALP,OAFR,EAQK,UAACoB,GAAD,EAAMC,SAAN,EAAoB;AACrB,YAAId,UAAUA,OAAOe,KAArB,EAA4B;AAC1BZ,kBAAQY,KAAR,GAAgBf,OAAOe,KAAvB;AACD;AACDb,iBAASY,UAAUf,OAAV,EAAmBI,OAAnB,CAAT;AACD,OAbH;;AAeA,aAAOD,MAAP;AACD;;;;;;AAGI,IAAMc,kCAAa,IAAIxB,gBAAJ,EAAnB","file":"translate.js","sourcesContent":["//\n// helpers.translate\n//\n'use strict';\n\nimport i18next from 'i18next';\nimport Radio from 'backbone.radio';\nimport sprintf from 'i18next-sprintf-postprocessor';\n\nconst resources = {};\nconst channel = Radio.channel('global');\n\nclass TranslateHelpers {\n\n  getLocale() {\n    let locale = 'en-GB';\n\n    if (channel.request('config')) {\n      const config = channel.request('config');\n\n      if (config.app) {\n        locale = config.app.locale || 'en-GB';\n      }\n    }\n\n    return locale;\n  }\n\n  addLocale(key, resStore) {\n    resources[key] = resStore;\n  }\n\n  translate(i18nKey, params) {\n    const locale = this.getLocale();\n    let result = null;\n    const options = {\n      postProcess: 'sprintf',\n      sprintf: params\n    };\n\n    i18next\n      .use(sprintf)\n      .init({\n        compatibilityJSON: 'v2',\n        nsSeparator: false,\n        keySeparator: false,\n        lng: locale,\n        resources: resources[locale]\n      }, (err, translate) => {\n        if (params && params.count) {\n          options.count = params.count;\n        }\n        result = translate(i18nKey, options);\n      });\n\n    return result;\n  }\n}\n\nexport const Translator = new TranslateHelpers();\n"]}