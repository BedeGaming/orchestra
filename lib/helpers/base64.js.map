{"version":3,"sources":["helpers/base64.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;;;;;;;IAEP,MAAM;WAAN,MAAM;0BAAN,MAAM;;;eAAN,MAAM;;WAEF,kBAAC,MAAM,EAAE;AACf,UAAM,KAAK,GAAG,2BAA2B,CAAC;;AAE1C,UAAI,CAAC,MAAM,EAAE;AACX,eAAO,KAAK,CAAC;OACd;;AAED,UAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,EAAE;AAChD,eAAO,KAAK,CAAC;OACd;;AAED,aAAO,IAAI,CAAC;KACb;;;WAEK,gBAAC,MAAM,EAAE;AACb,UAAM,MAAM,GAAG,kEAAkE,CAAC;AAClF,UAAM,MAAM,GAAG,EAAE,CAAC;AAClB,UAAI,GAAG,GAAG,CAAC,CAAC;AACZ,UAAI,IAAI,GAAG,CAAC,CAAC;AACb,UAAI,QAAQ,GAAG,CAAC,CAAC;AACjB,UAAI,CAAC,GAAG,CAAC,CAAC;;AAEV,YAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;;AAEnC,UAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AAC1B,eAAO,IAAI,CAAC;OACb;;AAED,YAAM,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;;;AAGnC,aAAO,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE;AACxB,WAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,gBAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;;AAEjB,gBAAQ,QAAQ;AAChB,eAAK,CAAC;;AACJ,kBAAM,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AAClC,kBAAM;AAAA,AACR,eAAK,CAAC;;AACJ,kBAAM,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAA,IAAK,CAAC,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AAC3C,kBAAM;AAAA,AACR,eAAK,CAAC;;AACJ,kBAAM,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAA,IAAK,CAAC,GAAG,GAAG,CAAC,CAAC;AACnC,kBAAM;AAAA,SACP;;AAED,YAAI,GAAG,GAAG,CAAC;AACX,SAAC,EAAE,CAAC;OACL;;;AAGD,aAAO,MAAM,CAAC;KACf;;;WAEO,kBAAC,MAAM,EAAE;AACf,aAAO,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;KAC7D;;;WAEO,kBAAC,MAAM,EAAE;AACf,UAAI;AACF,eAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;OAC1C,CAAC,OAAO,CAAC,EAAE;AACV,cAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;OACjC;KACF;;;SAnEG,MAAM;;;qBAsEG,IAAI,MAAM,EAAE","file":"helpers/base64.js","sourcesContent":["//\n// helpers.base64\n//\n'use strict';\n\nclass Base64 {\n\n  isBase64(string) {\n    const regex = /^[a-z0-9\\+\\/\\s]+\\={0,2}$/i;\n\n    if (!string) {\n      return false;\n    }\n\n    if (!regex.test(string) || string.length % 4 > 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  decode(string) {\n    const digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const result = [];\n    let cur = 0;\n    let prev = 0;\n    let digitNum = 0;\n    let i = 0;\n\n    string = string.replace(/\\s/g, '');\n\n    if (!this.isBase64(string)) {\n      return null;\n    }\n\n    string = string.replace(/\\=/g, '');\n\n    /*jshint bitwise:false */\n    while (i < string.length) {\n      cur = digits.indexOf(string.charAt(i));\n      digitNum = i % 4;\n\n      switch (digitNum) {\n      case 1: //second digit\n        result.push(prev << 2 | cur >> 4);\n        break;\n      case 2: //third digit\n        result.push((prev & 0x0f) << 4 | cur >> 2);\n        break;\n      case 3: //fourth digit\n        result.push((prev & 3) << 6 | cur);\n        break;\n      }\n\n      prev = cur;\n      i++;\n    }\n    /*jshint bitwise:true */\n\n    return result;\n  }\n\n  toString(string) {\n    return String.fromCharCode.apply(this, this.decode(string));\n  }\n\n  toObject(string) {\n    try {\n      return JSON.parse(this.toString(string));\n    } catch (e) {\n      throw new Error('Invalid JSON');\n    }\n  }\n}\n\nexport default new Base64();\n"],"sourceRoot":"/source/"}