{"version":3,"sources":["helpers/handlebars.js"],"names":[],"mappings":";;;;;AAKA,YAAY,CAAC;;;;;;kBAME,UAAS,UAAU,EAAE;;;AAElC,MAAI,UAAU,GAAG,kBAAG,OAAO,CAAC;;AAE5B,MAAI,MAAM,CAAC,UAAU,EAAE;AACrB,cAAU,GAAG,MAAM,CAAC,UAAU,CAAC;GAChC;;AAED,MAAI,UAAU,EAAE;AACd,cAAU,GAAG,UAAU,CAAC;GACzB;;;;;;AAAA,AAMD,YAAU,CAAC,cAAc,CAAC,OAAO,EAAE,UAAA,aAAa,EAAI;AAClD,WAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;AAC/B,WAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACpC,WAAO,CAAC,GAAG,OAAM,CAAC;;AAElB,QAAI,aAAa,EAAE;AACjB,aAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACrB,aAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACpC,aAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;KAC5B;GACF,CAAC;;;;;;;;;AAAC,AASH,YAAU,CAAC,cAAc,CAAC,WAAW,EAAE,YAAa;sCAAT,IAAI;AAAJ,UAAI;;;AAC7C,QAAI,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE;;;AAAC,AAG3B,QAAI,CAAC,GAAG,EAAE,CAAC;;AAEX,QAAI,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAK;AACnC,UAAI,OAAO,IAAI,KAAK,UAAU,EAAE;AAC9B,aAAK,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC;OACvB;KACF,CAAC,CAAC;;AAEH,WAAO,IAAI,UAAU,CAAC,UAAU,CAAC,oBAAW,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;GAEvE,CAAC,CAAC;;AAEH,YAAU,CAAC,cAAc,CAAC,UAAU,EAAE,UAAC,MAAM,EAAE,QAAQ,EAAK;AAC1D,UAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;;AAE5B,QAAI,QAAQ,EAAE;AACZ,cAAQ,GAAG,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;KACnC;;AAED,QAAI,GAAG,GAAG,mBAAe,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;AAElD,WAAO,IAAI,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;GACvC,CAAC,CAAC;;AAEH,SAAO,UAAU,CAAC;CACnB","file":"helpers/handlebars.js","sourcesContent":["//\n// ## helpers/handlebars\n//\n// Provides handlebars helpers\n//\n'use strict';\n\nimport HB from 'handlebars/runtime';\nimport translator from './translate';\nimport currencyHelper from './currency';\n\nexport default function(handlebars) {\n\n  let Handlebars = HB.default;\n\n  if (global.handlebars) {\n    Handlebars = global.handlebars;\n  }\n\n  if (handlebars) {\n    Handlebars = handlebars;\n  }\n\n  //\n  // place {{ debug }}\n  //\n\n  Handlebars.registerHelper('debug', optionalValue => {\n    console.log('Current Context');\n    console.log('====================');\n    console.log(this);\n\n    if (optionalValue) {\n      console.log('Value');\n      console.log('====================');\n      console.log(optionalValue);\n    }\n  });\n\n  /*\n   * call with {{translate \"i18n_key\" optional parmeters}}\n   * the options params are passed to sprintf and used\n   * with %s, %d etc\n   *\n   * full options here: https://github.com/alexei/sprintf.js\n   */\n  Handlebars.registerHelper('translate', (...args) => {\n    var i18nKey = args.shift();\n\n    // remove the options object\n    args.pop();\n\n    args.forEach((item, index, array) => {\n      if (typeof item === 'function') {\n        array[index] = item();\n      }\n    });\n\n    return new Handlebars.SafeString(translator.translate(i18nKey, args));\n\n  });\n\n  Handlebars.registerHelper('currency', (amount, decimals) => {\n    amount = parseFloat(amount);\n\n    if (decimals) {\n      decimals = parseInt(decimals, 10);\n    }\n\n    var str = currencyHelper.format(amount, decimals);\n\n    return new Handlebars.SafeString(str);\n  });\n\n  return Handlebars;\n}\n"],"sourceRoot":"/source/"}